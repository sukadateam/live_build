#Testing purposes only.
hide=False
from custom_database import *
import time
while True:
    if users.login_request(user=input('Username: '), password=input('Password: ')) == True:
        break
while True:
    encry_password=input('Enter Encryption Password: ')
    if check.encyption_password(password=encry_password)==0:
        break
    else:
        print("Incorrect Password.")
restore.all(beta=True, password=encry_password)
print("Please wait. Testing is now occuring...")
start=time.time()
if restore.remove_old_backups()==False:
    print('Error Found in restore.remove_old_backups()')
print('--(BACKUP TEST)--')
for i in range(5):
    backup.create('hjafa', password=encry_password)
backup.create(random_name=True, hide=hide, password=encry_password)
backup.clear_all()
print('--(BACKUP TEST COMPLETE)--')
check_settingsImproved(hide=hide)
print('\n--(save_in_textFile TEST)---')
save_in_txtFile.remove_files(hide=True)
save_in_txtFile.students()
save_in_txtFile.logs()
save_in_txtFile.users()
save_in_txtFile.tools()
print('\n--(save_in_textFile TEST COMPELTE)---')
print('\n--(PROFANITY TEST)--')
profanityFilter.disable()
profanityFilter.enable()
profanityFilter.deactivate()
profanityFilter.activate()
profanityFilter.setup()
profanityFilter.filter('Bitch', hide=hide, test=True)
print('--(PROFANITY TEST COMPLETE)--')
encrypt_check()
print('\n--(HISTORY TEST)--')
history.clear()
history.create_history('He said Hello!', 'admin', manual_record=False, add_desc=True, desc='So I said hello back to him!', hide=hide)
history.get_description(code='00000001', hide=hide)
optimize.run(hide=hide)
check_data(hide=hide)
print('--(HISTORY TEST COMPLETE)--')
print('\n--(SYSTEM INFO TEST)--')
info.app_version()
info.operating_system()
info.python_version()
save.all()
print('Screen Height: ',GetScreenHeight())
print('Screen Width: ',GetScreenWidth())
print('--(SYSTEM INFO TEST COMPLETE)--')
print('\n--(USER CLASS TEST)--')
users.create(new_user='test_dummy', new_password='testpas1',new_permission='admin', hide=hide)
users.disable(user='test_dummy', hide=hide)
users.enable(user='test_dummy', hide=hide)
users.change_permissions(user='test_dummy', new_permission='student', hide=hide)
users.change_password(user='test_dummy', new_password='test_pas2', hide=hide)
users.change_name(user='test_dummy', new_name='test_dummy1', hide=hide)
users.remove(user='test_dummy1', hide=hide)
print('--(USER CLASS TEST COMPLETE)--')
print('\n--(DATABASE CLASS TEST)--')
if check.data_base_exists(data_base='money')==False:
    data_base.create.database(data_base='money', type='list', hide=hide)
check.data_format(data_base='money')
print('--(DATABASE CLASS TEST COMPLETE)--')
print('\n--(TESTING MATH)--')
math1.pi()
math1.distance(speed=100, time=100)
math1.force(mass=100, acceleration=100)
print('--(TESTING MATH COMPLETE)--')
print('\n--(TESTING ERRORS)--')
errors.FileDoesNotExist(var='Test')
errors.NotSignedIn()
errors.BackupNameExists()
errors.doesNotObeyRestrictions()
errors.database_does_not_exist()
errors.cannot_call_func('Test')
errors.not_list()
errors.user_not_found()
errors.user_exists()
errors.user_exists()
errors.not_bool()
errors.not_int()
errors.incorrect_perm()
print('--(TESTING ERRORS COMPLETE)--')
print('\n--(TESTING PASSWORD RESTRICTIONS)--')
password_restrictions.check_password('TestingPurpose1235')
password_restrictions.set_min_length(value=15, hide=True)
password_restrictions.set_max_length(value=25, hide=True)
print('--(TESTING PASSWORD RESTRICTIONS COMPLETE)--')
print('\n--(TESTING FINISHED)--')
for i in range(100):
    print('')
print('Testing Done. Scroll up to check for problems.')
end=round(time.time()-start, 2)
print('Total time:', str(end)+' seconds')